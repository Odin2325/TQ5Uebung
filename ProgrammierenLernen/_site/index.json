{
  "ProgrammierenLernen/Dezember10.html": {
    "href": "ProgrammierenLernen/Dezember10.html",
    "title": "| ProgLearn",
    "keywords": "int test = 99; int zahl = 10; if (zahl < 0 || test > 20) { } switch (zahl) { case <0 or >20: break; } bool istGueltig = zahl switch { < 0 or > 20 => false }; Schleifen int wert = 0; do { Console.WriteLine(\"Geben Sie mir einen Wert zwischen 1-10: \"); int.TryParse(Console.ReadLine(), out wert); if(wert == 11) { continue; //Springe zu bedingung hin und ueberpruefe es nochmal. //Gehe in die naechste iteration. } } while (wert > 10 || wert < 1); //Im fall direkt richtige antwort => 1mal bedingung ueberprueft while (wert > 10 || wert < 1) { Console.WriteLine(\"Geben Sie mir einen Wert zwischen 1-10: \"); int.TryParse(Console.ReadLine(), out wert); if (wert == 99) { Console.WriteLine(\"Sonderfall gefunden!\"); break; } } //Im fall direkt richtige antwort => 2mal bedinung ueberprueft Schleife Beispiel While int i = 0; string text = \"Dies ist ein Test\"; int j = 500; while (i < 10) { if (i == 5) { Console.WriteLine(\"Halbwegs durch.\"); Console.WriteLine(\"Wir ueberspringen die Zahl 51.\"); i += 2; continue; } Console.WriteLine($\"Zahl: {i}\"); i++; }"
  },
  "ProgrammierenLernen/Dezember11.html": {
    "href": "ProgrammierenLernen/Dezember11.html",
    "title": "| ProgLearn",
    "keywords": "Array Anfang // 0 1 2 3 4 5 6 7 8... //[false|false|false|false|false|false|false|true|false|false|false|false|false|false|false|false|false|false|false|false|false|false] bool[] garageBesetzt = new bool[30]; garageBesetzt[7] = true; garageBesetzt[7] = false; Console.WriteLine(garageBesetzt[2]); **Beispiel Summe** int[] zahlen = [1, 43, 5, 65, 43, 23, 23, 65, 67, 87]; zahlen.Sum(); Foreach string satz = \"Hallo, mein name ist Nicolas.\"; string[] aufgeteilterSatz = satz.Split(' '); foreach(string wort in aufgeteilterSatz) { Console.WriteLine(wort); } Einfache Schleifen Uebung plus String[] beispiel string satz = \"Hallo, mein name ist Nicolas.\"; string[] aufgeteilterSatz = satz.Split(' '); foreach(string wort in aufgeteilterSatz) { Console.WriteLine(wort); } /* * Schreibt eine Methode die die Summe von einen int[] berechnet und zurueckgibt. * Rueckgabetyp soll int sein und parameter soll int[] sein. */ Array Join Beispiel /* * Aufgabe 1: Wir erstellen unsere eigene Join methode. * Die Methode Join() nimmt 2 parameter. * Einmal einen Array und einmal einen seperator. * Wir werden dann jedes element aus dieser Array in einen String verketten muessen. * Und mit den seperator teilen. * Bspw: Eingabe: array=[\"Hallo\",\"ich\",\"bin\",\"Nicolas\"], seperator='-' * Ausgabe erzeugen als String und zurueckgeben mit return: * \"Hallo-ich-bin-Nicolas\" */ Null string[] neuerArr = new string[10]; //0 //null //\"\" if (neuerArr[0] == null) { Console.WriteLine(\"Ist null\"); } else if(neuerArr[0] == \"\") { Console.WriteLine(\"Ist leerer string\"); } else { Console.WriteLine(\"Etwas anderes.\"); } Uebungen /* * Aufgabe 1: Wir erstellen unsere eigene Join methode. * Die Methode Join() nimmt 2 parameter. * Einmal einen Array und einmal einen seperator. * Wir werden dann jedes element aus dieser Array in einen String verketten muessen. * Und mit den seperator teilen. * Bspw: Eingabe: array=[\"Hallo\",\"ich\",\"bin\",\"Nicolas\"], seperator='-' * Ausgabe erzeugen als String und zurueckgeben mit return: * \"Hallo-ich-bin-Nicolas\" * * Aufgabe 2: Erstellt eine Print array Methode, die einen string[] * in diese form ausgibt: * Eingabe: array=[\"Hallo\",\"ich\",\"bin\",\"Nicolas\"] * Ausgabe: {Hallo, ich, bin, Nicolas} * Rueckgabe typ dieser Methode soll void sein. * * Aufgabe 3: Eine Reverse Methode erstellen. * Wo wir als eingabe parameter einen int[] bekommen. * Dies soll dann in die umgekeherte reihenfolge zurueckgegeben werden. * Eingabe: array=[1,2,3,4] * ausgabe=[4,3,2,1] * Rueckgabe typ dieser Methode soll int[] sein. * * Aufgabe 4: FindIndexVonWert methode schreiben. * Hier sollen wir einen double[] als eingabe parameter bekommen. * Wir bekommen zusaetzlich eine andere Zahl als eingabe parameter. * Wenn diese Zahl in das array enthalten ist => geben wir den index vom ersten vorkommen dieser Zahl aus. * Ansonsten (zahl nicht enthalten) => -1 ausgeben. */"
  },
  "ProgrammierenLernen/Dezember12.html": {
    "href": "ProgrammierenLernen/Dezember12.html",
    "title": "| ProgLearn",
    "keywords": "Beispiel 2d Array //2d array int[,] werte = new int[2,4]; //[[10,2,3,4],[5,6,7,8]] // 0 1 2 3 0 1 2 3 // 0 1 werte[0, 0] = 10; Method Overloading //Method Overloading! //Mehrere Methoden mit den gleichen namen. //Parameter muessen sich jedoch unterscheiden. //Rueckgabetyp aendern => egal //Code block ist anders => egal Einkaufsliste in Datei speichern List<string> unsereEinkaufsListe = EinkaufsListeGenerator(); Console.WriteLine(unsereEinkaufsListe); File.WriteAllLines(\"einkaufsliste.txt\", unsereEinkaufsListe); Pangram Aufgabe Kommentare /* * Schritt 1: Satz aufteilen - Done * Schritt 2: Einzelner Wort in array konvertieren - Done * Schritt 3: Wort umdrehen - Done * Schritt 4: Dies in eine schleife fuer der ganze satz machen. - Done * Schritt 5: Woerter danach in string wieder umwandeln. - Done * Schritt 6: Alle woerter wieder in einen einzelnen string kombinieren. - Done * Schritt 7: Ausgeben => Fertig */"
  },
  "ProgrammierenLernen/Dezember13.html": {
    "href": "ProgrammierenLernen/Dezember13.html",
    "title": "| ProgLearn",
    "keywords": "Dictionaries Anfang Beispiel //Supermarkt lager Dictionary<string, int> lagerPaletten = new Dictionary<string, int>(); lagerPaletten.Add(\"Milch\", 5); lagerPaletten.Add(\"Gurke\", 1); lagerPaletten.Add(\"Kekse\", 2); foreach (var keyValuePair in lagerPaletten) { Console.WriteLine($\"Key: {keyValuePair.Key} - Value: {keyValuePair.Value}\"); Console.WriteLine(lagerPaletten[\"Milch\"]); } foreach (var key in lagerPaletten.Keys) { if(key == \"Milch\") { lagerPaletten[key] = 2; } } //List<string> test = new List<string>(); //Jeder wert in List<string> ist ein string. //Bei dictionaries, jeder wert ist ein Key Value Pair Dictionary openWith Uebung /* * Ihr definiert eine Methode die heisst openWith(string path) * * HelferMethode: * \"/asdf/asdf/dateiname.exe\" * parameter(string pfad): rueckgabewert string * Wir muessen als erster schritt ueberpruefen, was die datei endung in unser pfad ist. * Um die Zeichen nach den Punkt zu bekommen, * empfehle ich eine neue Methode zu schreiben, die dass fuer euch schafft. * Diese helfermethode koennte beispielsweise in den pfad nach den index von einen \".\" suchen. * Dann anhand von diesen index und die Methode Substring(indexVonPunkt) die letzte Zeichen bekommen. * * Unsere Uebung wieder: * Dann moechten wir in unser openWith methode unser dictionary erstellen, * der als erster eintrag (schluessel) den string mit verschiedene dateiendungen enthaelt. * Bspw: txt, py, cs, html * Dann als wert paar moechten wir den pfad zu eine exe datei angeben. * Bspw: \"asdf/notepad.exe\", \"asdf/vscode.exe\", \"visualstudio.exe\", \"microsoftedge.exe\" * * Ueberpruefen ob key in unser dictionary enthalten ist. * * Wenn ja, dann gebe aus welche application wir verwenden wuerden um die datei zu oeffnen. * * Beipsiels ausgabe: * Sie koennen die Datei {dateiname} mit {applikation} oeffnen, da es eine {dateiendung} Datei ist. * => Mit Werte: Sie koennen die Datei {Aufgabe13Dez} mit {VSCode} oeffnen, da es eine {py} Datei ist. */ Loesung public static void OpenWith(string pfad) { string dateiName = DateiName(pfad); string dateiTyp = DateiTyp(pfad); string applicationName = \"\"; Dictionary<string, string> openingApplication = new Dictionary<string, string>(); openingApplication.Add(\"txt\", \"C:\\\\Windows\\\\system32\\\\notepad.exe\"); openingApplication.Add(\"cs\", \"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\Common7\\\\IDE\\\\devenv.exe\"); openingApplication.Add(\"py\", \"C:\\\\Users\\\\MYTQ-Trainer\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\Code.exe\"); openingApplication.Add(\"html\", \"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\"); if (openingApplication.ContainsKey(dateiTyp)) { applicationName = DateiName(openingApplication[dateiTyp]); Console.WriteLine($\"Sie koennen die Datei {dateiName} mit {applicationName} oeffnen, da es eine {dateiTyp} Datei ist.\"); } else { Console.WriteLine(\"Unknown File Type.\"); Console.WriteLine(\"Please download a software to open that kind of file.\"); } } public static string DateiTyp(string pfad) { int indexPunkt = pfad.LastIndexOf(\".\"); string nachPunkt = pfad.Substring(indexPunkt + 1); return nachPunkt; //return Path.GetExtension(pfad).Trim('.'); } public static string DateiName(string pfad) { int indexSchraegstrich = 0; if (pfad.Contains(\"\\\\\")) { indexSchraegstrich = pfad.LastIndexOf('\\\\'); } else if (pfad.Contains(\"/\")) { indexSchraegstrich = pfad.LastIndexOf('/'); } else { indexSchraegstrich = -1; } //01234567891011 =>Laenge = 12 - 5 = 7-3 = 4 //text/name.py int laenge = pfad.Length - indexSchraegstrich - DateiTyp(pfad).Length - 2; return pfad.Substring(indexSchraegstrich + 1,laenge); } Dictionary Einkaufen Uebung /* * Einkaufen bei TechStore (mediamarkt, apple store, saturn, etc...) list mit budget. * * Wir gehen einkaufen. Wir sollten ein budget in die methode als parameter eingeben. * Wir sollten jetzt in einen TechStore einkaufen gehen. * Der benutzer soll einen Menue bekommen mit die Produkte und ihre Preise die er kaufen koennte. * D.h. Wir brauchen einen dictionary fuer produkt und preis. * * Dann soll der benutzer in einen Kleinen menue aufgefordert werden produkte zu kaufen. * Wichtig hier, er darf sein budget nicht ueberschreiten. * * Programmablauf: * Wilkommen in MediaMarkt! * Was moechten Sie heute kaufen? * 1. Laptop - 1200 * 2. Handy - 800 * 3. Kaffeemaschine - 400 * 4. Waschmaschine - 700 * 5. Druecker - 140 * 6. Fernseher - 340 * 7. Beenden * * Wenn etwas gekauft wird, dann soll es zu die gekaufteProdukte hinzugefuegt werden. * Wir haben hierfuer eine Liste mit alle produkte die gekauft worden sind * Und auch eine variable fuer die gesamt summe aller produkte die wir gekauft haben. * * Es soll am ende eine Rechnung erstellt werden: * Es soll ausgegeben werden welche produkte gekauft worden sind, wie viel wir dafuer gezahlt haben und am ende die summe. * Bspw: [Handy, Drueker, Fernseher, Handy]: * * Handy x2 - 1600 * Druecker x1 - 140 * Fernseher x1 - 340 * Betrag: 2080 */ Loesung public static void TechEinkaufen(decimal budget) { Dictionary<string, int> warenkorb = new Dictionary<string, int>(); decimal betrag = 0; string? eingabe = \"\"; bool willAbrechen = false; Dictionary<string, decimal> produkte = new Dictionary<string, decimal> { {\"Laptop\", 1200}, {\"Handy\", 800}, {\"Drucker\", 140}, {\"Fernseher\", 340}, {\"Kaffeemaschine\", 400}, {\"Waschmaschine\",700}, }; Console.WriteLine(\"Wilkommen in MediaMarkt: \"); Console.WriteLine(\"Was moechten Sie heute kaufen?\"); Console.WriteLine(\"Druecken Sie bitte die dazugehoerige Zahl um ein Produkt in Ihr Warenkorb hinzuzufuegen.\"); while (!willAbrechen) { Console.WriteLine(\"Druecken Sie bitte eine Taste um weiter zu machen.\"); Console.ReadKey(); Console.Clear(); if (betrag + MinDictionary(produkte) > budget) { Console.WriteLine(\"Sie koennen keine weitere Produkte kaufen.\"); Console.WriteLine(\"Ihr Budget ist ausgenutzt, wir schicken Ihnen zum Checkout.\"); break; } Console.WriteLine(\"Ihr budget betraegt: \" + (budget-betrag)); Console.WriteLine(\"1. Laptop - 1200\\r\\n2. Handy - 800\\r\\n3. Kaffeemaschine - 400\\r\\n4. Waschmaschine - 700\\r\\n5. Drucker - 140\\r\\n6. Fernseher - 340\\r\\n7. Beenden\"); eingabe = Console.ReadLine(); if(eingabe == null || eingabe == \"\") { continue; } var ausgewaehlterProdukt = \"\"; switch (eingabe) { case \"1\": ausgewaehlterProdukt = \"Laptop\"; break; case \"2\": ausgewaehlterProdukt = \"Handy\"; break; case \"3\": ausgewaehlterProdukt = \"Kaffeemaschine\"; break; case \"4\": ausgewaehlterProdukt = \"Waschmaschine\"; break; case \"5\": ausgewaehlterProdukt = \"Drucker\"; break; case \"6\": ausgewaehlterProdukt = \"Fernseher\"; break; case \"7\": willAbrechen = true; continue; default: Console.WriteLine(\"Ungueltige Eingabe, bitte nur Zahlen zwischen 1-7 eingeben.\"); continue; } if (betrag + produkte[ausgewaehlterProdukt] <= budget) { //Wenn ein key nicht vorhanden ist und wir machen eine zuweisung mit schluessel und wert, dann wird es hinzugefuegt. warenkorb[ausgewaehlterProdukt] = warenkorb.GetValueOrDefault(ausgewaehlterProdukt, 0) + 1; betrag += produkte[ausgewaehlterProdukt]; } else { Console.WriteLine(\"Nicht genug geld im Budget.\"); } } Console.WriteLine(\"Hier ist Ihre Rechnung: \"); Console.WriteLine(RechnungErstellenOhneGesamtBetrag(produkte, warenkorb)+\"Betrag: \" + betrag); } public static string RechnungErstellenOhneGesamtBetrag(Dictionary<string, decimal> produkte, Dictionary<string, int> warenkorb) { //laptop, 2 //Handy x2 - 1600 string resultat = \"\"; foreach (var kvp in warenkorb) { if (produkte.ContainsKey(kvp.Key)) { resultat += $\"{kvp.Key} x{kvp.Value} - {kvp.Value * produkte[kvp.Key]}\\r\\n\"; } } return resultat; } public static decimal MinDictionary(Dictionary<string, decimal> produkte) { decimal min = decimal.MaxValue; foreach(var paar in produkte) { if(paar.Value < min) { min = paar.Value; } } return min; }"
  },
  "ProgrammierenLernen/Dezember16.html": {
    "href": "ProgrammierenLernen/Dezember16.html",
    "title": "| ProgLearn",
    "keywords": "RNA Uebersetzung BeispielsLoesung public static List<string> RnaUebersetzung(string rnaSequenz) { var proteinen = new List<string>(); for(int i = 0; i < rnaSequenz.Length; i += 3) { if (i > rnaSequenz.Length-3) { Console.WriteLine(\"Zeichenketten nicht durch 3 Teilbar.\"); Console.WriteLine($\"Nur bis zu index {i} gelaufen.\"); break; } string codon = rnaSequenz.Substring(i, 3); string proteine = codon switch { \"AUG\" => \"Methionin\", \"UUU\" or \"UUC\" => \"Phenylalanin\", \"UUA\" or \"UUG\" => \"Leucin\", \"UCU\" or \"UCC\" or \"UCA\" or \"UCG\" => \"Serin\", \"UAU\" or \"UAC\" => \"Tyrosin\", \"UGU\" or \"UGC\" => \"Cystein\", \"UGG\" => \"Tryptophan\", \"UAA\" or \"UAG\" or \"UGA\" => \"STOP\", _ => \"\" }; if(proteine == \"STOP\") { break; } if(proteine == \"\") { Console.WriteLine(\"Ungueltige eingabe erreicht: \" + codon); break; } proteinen.Add(proteine); } return proteinen; } Regentropfen BeispielsLoesung public static void RegentropfenFaktoren(int obereGrenze) { Console.WriteLine(\"Regentropfen Start\"); for (int i = 0; i < obereGrenze; i++) { string resultat = \"\"; if (i % 3 == 0) { resultat += \"Pling\"; } if (i%5==0) { resultat += \"Plang\"; } if (i % 7 == 0) { resultat += \"Plong\"; } if (resultat.Length>0 && i!=0) { Console.WriteLine($\"{i} - {resultat}\"); } else { Console.WriteLine(i); } } } PlanetenAlter BeispielsLoesung public static void PlanetenAlter() { Console.WriteLine(\"Wie alt bist du in Sekunden?\"); if(!double.TryParse(Console.ReadLine(), out double sekunden)) { Console.WriteLine(\"Ungueltige eingabe.\"); } double erdJahren = sekunden / 31557600; Console.WriteLine(\"Merkur: \" + Math.Round(erdJahren/0.2408467)); Console.WriteLine(\"Venus: \" + erdJahren / 0.61519726); Console.WriteLine(\"Erde: \" + erdJahren); Console.WriteLine(\"Mars: \" + erdJahren / 1.8808158); Console.WriteLine(\"Jupiter: \" + erdJahren / 11.862615); Console.WriteLine(\"Saturn: \" + erdJahren / 29.447498); Console.WriteLine(\"Uranus: \" + erdJahren / 84.016846); Console.WriteLine(\"Neptun: \" + erdJahren / 164.79132); } Schaltjahr BeispielLoesung static void Schaltjahr() { Console.WriteLine(\"bitte gib eine Jahreszahl ein\"); int Jahr = int.Parse(Console.ReadLine()); if (Jahr >= 0) { Console.WriteLine(\"g�ltige Jahreszahl\"); if ((Jahr % 4 == 0 && Jahr % 100 != 0) || (Jahr % 400 == 0)) { Console.WriteLine(\"ihre Jahreszahl entspricht einem Schaltjahr\"); } else { Console.WriteLine(\"ihre Jahreszahl entspricht nicht einem Schaltjahr\"); } } else { Console.WriteLine(\"ung�ltige Eingabe!\"); } } Variante2 public bool BerechneSchaltjahr(int jahr) { if (jahr % 4 == 0) { if (jahr % 100 == 0) { return jahr % 400 == 0; } return true; } return false; }"
  },
  "ProgrammierenLernen/Dezember19.html": {
    "href": "ProgrammierenLernen/Dezember19.html",
    "title": "| ProgLearn",
    "keywords": "Flugzeug Main Beispiel Flugzeug a380 = new Flugzeug(); Flugzeug boeing747 = new Flugzeug(); boeing747.hersteller = \"Boeing\"; boeing747.modell = \"747\"; boeing747.sitzplaetze = 660; boeing747.reichweite = 14815; boeing747.maxGeschwindigkeit = 988; boeing747.flugHoehe = 13100; //Console.WriteLine(boeing747.hersteller); Console.WriteLine(Flugzeug.anzahlFlugzeuge); /* * Uebung1: * Wir erstellen jetzt eine Klasse Auto. * Diese Klasse soll folgende Eigenschaften haben: * farbe * hersteller * modell * maxGeschwindigkeit * hat4WD * * Ueberlegt euch 3 weitere Eigenschaften fuer die Klasse Auto. * Nachdem ihr die Klasse erstellt habt, erstellt 2 Objekte der Klasse Auto. */"
  },
  "ProgrammierenLernen/Dezember4.html": {
    "href": "ProgrammierenLernen/Dezember4.html",
    "title": "| ProgLearn",
    "keywords": "Variablen Erstellen //bool boolean => True/False //char character => einen zeichen mit 'z' //datentyp variableName = wertMitGleichenTypWieDatentyp; int meinName = 1234567; Console.WriteLine(meinName); bool istEinenString = meinName.GetType() == typeof(int); Console.WriteLine(istEinenString);"
  },
  "ProgrammierenLernen/Dezember5.html": {
    "href": "ProgrammierenLernen/Dezember5.html",
    "title": "| ProgLearn",
    "keywords": "Beispiel Division Aufgabe mit Alter int summe; double durchschnitt; int alterNico = 90; int alterAfsoon = 24; int alterStalone = 25; int alterHugo = 20; //Durchschnitt formel summe aller werte / anzahl werte //Resultat auf konsole ausgeben. summe = alterNico + alterAfsoon + alterStalone + alterHugo; //159 int alterSonja = 18; //summe = summe + alterSonja; summe += alterSonja; //177 durchschnitt = summe / 5.0; Console.WriteLine(\"Summe: \" + summe); Console.WriteLine(\"Durchschnitt: \" + durchschnitt); Uebung Volume Cube /* Volume von einen kubus berechnen moechten. Gehen davon aus wir haben eine variable laenge die wir benutzen duerfen Programm soll so aussehen: Program Start... Wir berechnen den Volumen von einen Cube... Laenge ist: 12... Volume ist: 121212... */ //int laenge = 12; //int volume = 12 * 12 * 12; //Console.WriteLine(\"Program Start...\"); //Console.WriteLine(\"Wir berechnen den Volumen von einen Cube...\"); //Console.WriteLine(\"Laenge ist: \" + laenge + \"...\"); //Console.WriteLine(\"Volume ist: \" + volume + \"...\"); //int laenge = 12; //int volumeCube = 12 * 12 * 12; //Console.WriteLine(\"Program Start...\"); //Console.WriteLine(volumeCube); Explizite Typ Konvertierungen Wir k�nnen Werte Explizit mit funktionen Konvertieren. Daf�r haben wir ein paar optionen. Von etwas in int => int.TryParse(wasWirKonvertierenMoechten, out int variableWoWirDenResultatSpeichern) int nur angeben, wenn die Variable noch erstellt werden muss. Diese Methode Liefert auch einen Boolean als Resultat Zur�ck was wir auch abspeichern k�nnten. Mit Convert.ToInt32() k�nnen wir zu einen int konvertieren. Es gibt in die Klasse Convert, viele unterschiedliche Methode um Typen zu konvertieren. Viele Datentypen variablen haben die m�glichkeit die Methode .ToString() von sich aufzurufen um sich zu einen String zu konvertieren. Beispiel: string laengeStringVersion = \"1287654324567897654678765678765467879897857567678574556\"; bool hatFunktioniert = int.TryParse(laengeStringVersion, out int laenge); Console.WriteLine(hatFunktioniert); Console.WriteLine(laengelaengelaenge); Beispiel 2: /* Wir haben die variable decimal geld = 300.50m Wir moechten jetzt den datentyp float haben. float gewechselterTyp; Ausgabe soll folgendermassen aussehen: Console.WriteLine(\"Der Typ der variable ist: \" + gewechselterTyp.GetType()); Console.WriteLine(\"Wert = \" + gewechselterTyp); */ Benutzer Eingaben"
  },
  "ProgrammierenLernen/Dezember6.html": {
    "href": "ProgrammierenLernen/Dezember6.html",
    "title": "| ProgLearn",
    "keywords": "Beispiel Modulo int wert = 123475642; int zahlModulo = 2; Console.WriteLine(\"Ist der Wert \" + wert + \" durch \" + zahlModulo + \" teilbar? \" + (wert%zahlModulo == 0)); Noten Aufgabe //Variablen Erstellen double anzahlNoten = 5; int sophiaBiologie = 93; int sophiaPhysik = 80; int sophiaLK = 78; int sophiaMathe = 50; int sophiaChemie = 70; int nicolasBiologie = 89; int nicolasPhysik = 70; int nicolasLK = 100; int nicolasMathe = 90; int nicolasChemie = 70; int jeongBiologie = 93; int jeongPhysik = 30; int jeongLK = 96; int jeongMathe = 90; int jeongChemie = 99; int summeSophia = sophiaBiologie + sophiaPhysik + sophiaLK + sophiaMathe + sophiaChemie; int summeNicolas = nicolasBiologie + nicolasPhysik + nicolasLK + nicolasMathe + nicolasChemie; int summeJeong = jeongBiologie + jeongPhysik + jeongLK + jeongMathe + jeongChemie; Console.WriteLine(\"Summe Noten: \\n\"); Console.WriteLine($\"Sophia: {summeSophia}\"); Console.WriteLine(\"Nicolas: \" + summeNicolas); Console.WriteLine(\"Joeng: \" + summeJeong); Console.WriteLine(\"\\n---------------------------------\\n\"); double durchschnittSophia = summeSophia / anzahlNoten; double durchschnittNicolas = summeNicolas / anzahlNoten; double durchschnittJeong = summeJeong / anzahlNoten; Console.WriteLine(\"Endgueltige Noten: \\n\"); Console.WriteLine($\"Sophia: \\t{durchschnittSophia} \\t C\"); Console.WriteLine(\"Nicolas: \\t\" + durchschnittNicolas + \"\\t B\"); Console.WriteLine(\"Joeng: \\t\\t\" + durchschnittJeong + \"\\t B-\"); Console.WriteLine(\"\\n---------------------------------\\n\"); Platzhalter"
  },
  "ProgrammierenLernen/Dezember9.html": {
    "href": "ProgrammierenLernen/Dezember9.html",
    "title": "| ProgLearn",
    "keywords": "Beispiel Logische Operatoren //== Vergleich //!= Ungleich // > groesser // < kleiner // >= groesser gleich // <= kleiner gleich int x = 30; Console.WriteLine(x<10 || x<5); //Der einzige Weg in dem einen && operator true zurueckliefern kann, ist wenn beide seiten True sind. //Der einzige Weg in dem ein || operator false zurueckliefern kann, ist wenn beide seiten falsch sind. bool istValide = false;"
  },
  "ProgrammierenLernen/bin/Debug/net8.0/getting-started.html": {
    "href": "ProgrammierenLernen/bin/Debug/net8.0/getting-started.html",
    "title": "Getting Started | ProgLearn",
    "keywords": "Getting Started"
  },
  "ProgrammierenLernen/bin/Debug/net8.0/introduction.html": {
    "href": "ProgrammierenLernen/bin/Debug/net8.0/introduction.html",
    "title": "Introduction | ProgLearn",
    "keywords": "Introduction"
  },
  "ProgrammierenLernen/docs/getting-started.html": {
    "href": "ProgrammierenLernen/docs/getting-started.html",
    "title": "Getting Started | ProgLearn",
    "keywords": "Getting Started"
  },
  "ProgrammierenLernen/docs/introduction.html": {
    "href": "ProgrammierenLernen/docs/introduction.html",
    "title": "Introduction | ProgLearn",
    "keywords": "Introduction"
  },
  "ProgrammierenLernen/index.html": {
    "href": "ProgrammierenLernen/index.html",
    "title": "This is the HOMEPAGE. | ProgLearn",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "api/ProgrammierenLernen.Fahrzeug.html": {
    "href": "api/ProgrammierenLernen.Fahrzeug.html",
    "title": "Class Fahrzeug | ProgLearn",
    "keywords": "Class Fahrzeug Namespace ProgrammierenLernen Assembly ProgrammierenLernen.dll Parent Class to represent all vehicles. public abstract class Fahrzeug Inheritance object Fahrzeug Derived Motorrad PKW Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Fahrzeug(string, string, int, string) Constructor for a generic vehicle protected Fahrzeug(string marke, string klasse, int baujahr, string motor) Parameters marke string klasse string baujahr int motor string Fields aktuelleGeschwindigkeit protected int aktuelleGeschwindigkeit Field Value int baujahr protected int baujahr Field Value int klasse protected string klasse Field Value string marke protected string marke Field Value string maxGeschwindigkeit protected int maxGeschwindigkeit Field Value int motor protected string motor Field Value string motorLäuft protected bool motorLäuft Field Value bool Properties Baujahr public int Baujahr { get; } Property Value int Klasse public string Klasse { get; } Property Value string Marke public string Marke { get; set; } Property Value string Motor public string Motor { get; set; } Property Value string Methods Bremsen(int) Method to decrease the speed of the vehicle given a specific increment. public void Bremsen(int inkrement) Parameters inkrement int Hupen() Abstract method to implement the sound of a vehicles horn. public abstract void Hupen() ManageMotor() Change the current state of the motor. public void ManageMotor() Parken() Parking class. Allows parking only if the motor is off and the speed is 0. Otherwise we turn the motor off or brake until we reach the speed 0. public bool Parken() Returns bool SchnellerFahren(int) Increase the speed of our vehicle given a specific increment. public void SchnellerFahren(int inkrement) Parameters inkrement int"
  },
  "api/ProgrammierenLernen.Flugzeug.html": {
    "href": "api/ProgrammierenLernen.Flugzeug.html",
    "title": "Class Flugzeug | ProgLearn",
    "keywords": "Class Flugzeug Namespace ProgrammierenLernen Assembly ProgrammierenLernen.dll public class Flugzeug Inheritance object Flugzeug Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Flugzeug(string, string, int, double) public Flugzeug(string hersteller, string modell, int sitzplaetze, double maxGeschwindigkeit) Parameters hersteller string modell string sitzplaetze int maxGeschwindigkeit double Properties Hersteller public string Hersteller { get; set; } Property Value string"
  },
  "api/ProgrammierenLernen.Motorrad.html": {
    "href": "api/ProgrammierenLernen.Motorrad.html",
    "title": "Class Motorrad | ProgLearn",
    "keywords": "Class Motorrad Namespace ProgrammierenLernen Assembly ProgrammierenLernen.dll Class to represent motorcycles. public class Motorrad : Fahrzeug Inheritance object Fahrzeug Motorrad Inherited Members Fahrzeug.marke Fahrzeug.klasse Fahrzeug.baujahr Fahrzeug.motor Fahrzeug.maxGeschwindigkeit Fahrzeug.motorLäuft Fahrzeug.aktuelleGeschwindigkeit Fahrzeug.Motor Fahrzeug.Baujahr Fahrzeug.Klasse Fahrzeug.Marke Fahrzeug.Parken() Fahrzeug.Bremsen(int) Fahrzeug.SchnellerFahren(int) Fahrzeug.ManageMotor() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Motorrad(string, string, int, string) public Motorrad(string marke, string klasse, int baujahr, string motor) Parameters marke string klasse string baujahr int motor string Methods Hupen() Abstract method to implement the sound of a vehicles horn. public override void Hupen()"
  },
  "api/ProgrammierenLernen.PKW.html": {
    "href": "api/ProgrammierenLernen.PKW.html",
    "title": "Class PKW | ProgLearn",
    "keywords": "Class PKW Namespace ProgrammierenLernen Assembly ProgrammierenLernen.dll public class PKW : Fahrzeug Inheritance object Fahrzeug PKW Inherited Members Fahrzeug.marke Fahrzeug.klasse Fahrzeug.baujahr Fahrzeug.motor Fahrzeug.maxGeschwindigkeit Fahrzeug.motorLäuft Fahrzeug.aktuelleGeschwindigkeit Fahrzeug.Motor Fahrzeug.Baujahr Fahrzeug.Klasse Fahrzeug.Marke Fahrzeug.Parken() Fahrzeug.Bremsen(int) Fahrzeug.SchnellerFahren(int) Fahrzeug.ManageMotor() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PKW(string, string, int, string) public PKW(string marke, string klasse, int baujahr, string motor) Parameters marke string klasse string baujahr int motor string Methods Hupen() Abstract method to implement the sound of a vehicles horn. public override void Hupen()"
  },
  "api/ProgrammierenLernen.Utils.html": {
    "href": "api/ProgrammierenLernen.Utils.html",
    "title": "Class Utils | ProgLearn",
    "keywords": "Class Utils Namespace ProgrammierenLernen Assembly ProgrammierenLernen.dll public class Utils Inheritance object Utils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BerechneSchaltjahr(int) public bool BerechneSchaltjahr(int jahr) Parameters jahr int Returns bool CalculateSumme(int) public static void CalculateSumme(int target) Parameters target int Collatz(int, int) public static (int, int) Collatz(int n, int schritte = 0) Parameters n int schritte int Returns (int, int) DateiName(string) public static string DateiName(string pfad) Parameters pfad string Returns string DateiTyp(string) public static string DateiTyp(string pfad) Parameters pfad string Returns string EingabePruefen() public static void EingabePruefen() EinkaufsListeGenerator() public static List<string> EinkaufsListeGenerator() Returns List<string> EinsDichMich() public static void EinsDichMich() Faktoriell(BigInteger) public static BigInteger Faktoriell(BigInteger zahl) Parameters zahl BigInteger Returns BigInteger FindIndex(double[], double) public static int FindIndex(double[] zahlen, double gesuchteZahl) Parameters zahlen double[] gesuchteZahl double Returns int GenerateRandomWord(int) public string GenerateRandomWord(int length) Parameters length int Returns string JoinArray(int[], string) public static string JoinArray(int[] zeichenFolgen, string seperator = \" \") Parameters zeichenFolgen int[] seperator string Returns string JoinArray(string[], string) public static string JoinArray(string[] zeichenFolgen, string seperator = \" \") Parameters zeichenFolgen string[] seperator string Returns string ListStatistics(List<double>) public static (double Durchschnitt, double Summe, double Min, double Max, int Count) ListStatistics(List<double> zahlen) Parameters zahlen List<double> Returns (double Durchschnitt, double Summe, double Min, double Max, int Count) MinDictionary(Dictionary<string, decimal>) public static decimal MinDictionary(Dictionary<string, decimal> produkte) Parameters produkte Dictionary<string, decimal> Returns decimal NANP(string) public static void NANP(string telephoneNummer) Parameters telephoneNummer string NcR(BigInteger, BigInteger) Calculates n choose r. public static BigInteger NcR(BigInteger n, BigInteger r) Parameters n BigInteger r BigInteger Returns BigInteger OpenWith(string) public static void OpenWith(string pfad) Parameters pfad string Pangram() public static Tuple<List<string>, List<string>> Pangram() Returns Tuple<List<string>, List<string>> Pangram(string) Ein gegebener Satz wird aufgeteilt in einzelne Woerter. Danach werden diese Woerter umgedreht mit unsere Reverse() methode. Dann geben wir wieder alle Woerter in einen String zurueck ohne die Reihenfolge zu veraendern. public static string Pangram(string eingabe) Parameters eingabe string Unser Eingabe Satz Returns string Eingabe Soll umgedreht werden. Pangram(string, string) public static string Pangram(string input, string sep = \" \") Parameters input string sep string Returns string PascalTriangle(int) Creates a pyramid representing the values in Pascals Triangle. public static void PascalTriangle(int hoehe) Parameters hoehe int PinUeberpruefung(string) public static bool PinUeberpruefung(string echtenPin) Parameters echtenPin string Returns bool PlanetenAlter() public static void PlanetenAlter() PrintArray(int[]) public static void PrintArray(int[] array) Parameters array int[] PrintArray(string[]) public static void PrintArray(string[] array) Parameters array string[] PyramideErstellen(int) public static void PyramideErstellen(int n) Parameters n int RandomChars(int, bool) public static string RandomChars(int length, bool includeUpperCase = false) Parameters length int includeUpperCase bool Returns string RechnungErstellenOhneGesamtBetrag(Dictionary<string, decimal>, Dictionary<string, int>) public static string RechnungErstellenOhneGesamtBetrag(Dictionary<string, decimal> produkte, Dictionary<string, int> warenkorb) Parameters produkte Dictionary<string, decimal> warenkorb Dictionary<string, int> Returns string RegentropfenFaktoren(int) public static void RegentropfenFaktoren(int obereGrenze) Parameters obereGrenze int RepeatInput() public static void RepeatInput() ReverseString(string) public static string ReverseString(string wort) Parameters wort string Returns string RnaUebersetzung(string) public static List<string> RnaUebersetzung(string rnaSequenz) Parameters rnaSequenz string Returns List<string> StudentAusgabe() Erzeugt eine schoene ausgabe anhand von die StudentenInfos Tupeln. public static void StudentAusgabe() Summe(decimal[]) public static decimal Summe(decimal[] zahlen) Parameters zahlen decimal[] Returns decimal Summe(int, int) public static int Summe(int a, int b) Parameters a int b int Returns int Summe(int[]) public static int Summe(int[] zahlen) Parameters zahlen int[] Returns int TechEinkaufen(decimal) public static void TechEinkaufen(decimal budget) Parameters budget decimal"
  },
  "api/ProgrammierenLernen.html": {
    "href": "api/ProgrammierenLernen.html",
    "title": "Namespace ProgrammierenLernen | ProgLearn",
    "keywords": "Namespace ProgrammierenLernen Classes Fahrzeug Parent Class to represent all vehicles. Flugzeug Motorrad Class to represent motorcycles. PKW Utils"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ProgLearn",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ProgLearn",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ProgLearn",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}